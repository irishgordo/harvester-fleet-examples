apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    field.cattle.io/description: nginx 1 deployment
  labels:
    workload.user.cattle.io/workloadselector: apps.deployment-default-ngx9
  name: ngx9
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-default-ngx9
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        svc: ngx9
        workload.user.cattle.io/workloadselector: apps.deployment-default-ngx9
      namespace: default
    spec:
      affinity: {}
      containers:
        - image: nginx:latest
          imagePullPolicy: IfNotPresent
          name: ngx9
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    field.cattle.io/description: nginx 2 deployment
  labels:
    workload.user.cattle.io/workloadselector: apps.deployment-default-ngx11
  name: ngx11
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-default-ngx11
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        svc: ngx11
        workload.user.cattle.io/workloadselector: apps.deployment-default-ngx11
      namespace: default
    spec:
      affinity: {}
      containers:
        - image: nginx:latest
          imagePullPolicy: IfNotPresent
          name: ngx11
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

